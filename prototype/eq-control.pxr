@ /eq-control root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 960
  .height 400
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 617
    #%graph.y -108
    .always-on-top true
    .show-cursor true
  }
  @ ./eq video:gl:p2d {
    #%graph.x 426
    #%graph.y 252
    .code "

    @P(1) @OnChange(\"processFFT\") float\[\] fftIn;
    @P(2) @Type.Number(def=0.2, min=0, max=1) double smoothing;
    
    @P(5) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil0;
    @P(6) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil1;
    @P(7) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil2;
    
    float\[\] fft;
    int maxFFT;
    final int MAX_FREQ = 10910;
    double barWidth;
    
    private final static int PINGS_COUNT = 3;
    @P(13) @ReadOnly int\[\] pingBands; // Frequency bands
    @P(10) @ReadOnly int\[\] pingFreqs;   // Frequencies
    @P(11) @ReadOnly double\[\] pingPowers;      // Input, raw power
    @P(12) @ReadOnly int\[\] pingAdjusts; // Adjusted power
    
    @Out(0) Output ping0;
    @Out(1) Output ping1;
    @Out(2) Output ping2;
    
    @Inject @Type.Number Property led0;
    @Inject @Type.Number Property led1;
    @Inject @Type.Number Property led2;
    
    // TODO: ping coverage (grab 1, 2 or three bands)
    
    Output\[\] pings;
    Property\[\] leds;
    Property\[\] recoils;
    
    
    @Override
    public void setup() \{
        pings = new Output\[\] \{ ping0, ping1, ping2 \};
        leds = new Property\[\] \{ led0, led1, led2 \};
        recoils = new Property\[\] \{ recoil0, recoil1, recoil2 \};
        rectMode(CORNERS);
        ellipseMode(CENTER);
        strokeWeight(1);
    \}
    
    @T(0) void reset() \{
        pingBands = new int\[PINGS_COUNT\];
        pingFreqs = new int\[PINGS_COUNT\];
        pingPowers = new double\[PINGS_COUNT\];
        pingAdjusts = new int\[PINGS_COUNT\];
        Arrays.fill(pingBands, Integer.MAX_VALUE);
        Arrays.fill(pingFreqs, Integer.MAX_VALUE);
        Arrays.fill(pingPowers, Double.MAX_VALUE);
        Arrays.fill(pingAdjusts, Integer.MAX_VALUE);
    \}

    void processFFT() \{
        if(null == fft) \{
            fft = fftIn;
        \}
        maxFFT = fftIn.length/2;
        float\[\] newFFT = new float\[maxFFT\];
        float s = (float) smoothing;
        try \{
            for (int i=0; i<maxFFT; ++i) \{
                newFFT\[i\] = fft\[i\]*s + fftIn\[i\]*(1-s);
            \}
        \} catch (ArrayIndexOutOfBoundsException e) \{
            log(WARNING, \"Something weird in processFFT()  - try reset button\");
        \} finally \{
            fft = newFFT;
        \}
    \}
    

    @Override
    public void draw() \{
        if(null == fft || fft.length == 0 || 0 == maxFFT) \{
            log(WARNING, \"No signal yet received - ignore if doesn't repeat\");
            return;
        \}
        fill(255);
        stroke(255);
        boolean mouseHit = false;
        int eqWidth = width;
        barWidth = (eqWidth)/(maxFFT);
        for(int i = 0; i<maxFFT; ++i) \{
            float amp = fft\[i\];
            double displayAmp = adjustPower(amp);
            double left = barWidth*i;
            double right = barWidth*i + barWidth;
            rect(left+1, height, right-1, height-displayAmp);
            if(left <= mouseX && right >= mouseX && displayAmp > height - mouseY) \{
                mouseHit = true;
            \}
            checkPings(amp, i);  // should go to processFFT
        \}
        
        drawPings();
        
        fill(255);
        text(String.format(\"FFT Bands: %d\", maxFFT), width - 130, height - 20);
        
        stroke(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        fill(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        if (pmouseX < eqWidth) \{
            line(pmouseX, 0, pmouseX, height);
            line(0, pmouseY, eqWidth, pmouseY);
            int freqBand = (int) (pmouseX / barWidth);
            int freq = (int) (MAX_FREQ * (double)pmouseX / eqWidth);
            int adjustedPowerMouse = height-pmouseY;
            double powerMouse = deAdjustPower(adjustedPowerMouse);
            
            printFreqPowerInfo(pmouseX, pmouseY, 
                    freqBand, freq, powerMouse, adjustedPowerMouse, null);
            
            // update pingsw
            if(keyPressed) \{
                int pingNo = -1;
                if (key == 'q' || key == 'Q') \{
                    pingNo = 0;
                \} else if (key == 'w' || key == 'W') \{
                    pingNo = 1;
                \} else if (key == 'e' || key == 'E') \{
                    pingNo = 2;
                \} 
                    
                if(pingNo > -1) \{
                    text(String.format(\"Ping-%d\",pingNo), pmouseX-50, pmouseY-5);
                    if (mousePressed) \{
                        pingBands\[pingNo\] = freqBand;
                        pingFreqs\[pingNo\] = freq;
                        pingPowers\[pingNo\] = powerMouse;
                        pingAdjusts\[pingNo\] = adjustedPowerMouse;
                    \}
                \}
            \}
        \}
        
        noFill();
        stroke(0, 30, 0);
        rect(0, 0, width-1, height-1);
    \}
    
    void checkPings(double power, int band) \{
        try \{
            for (int i=0; i<PINGS_COUNT; ++i) \{
                if(power >= pingPowers\[i\] && band == pingBands\[i\] && !leds\[i\].isAnimating()) \{
                    leds\[i\].set(255).to(0).in(d(recoils\[i\])).easing(Easing.cubicIn);
                    pings\[i\].send();
                \}
            \}
        \} catch(ArrayIndexOutOfBoundsException e) \{
            log(WARNING, \"Something weird in checkPings()  - try reset button\");
        \}
    \}
    
    void drawPings() \{
        noStroke();
        for(int i=0; i<PINGS_COUNT; ++i) \{
            String label;
            String colorName;
            if(i==0) \{
                fill(255, 0 , 0, d(leds\[i\]));
                label = \"Q\";
                colorName = \"Red\";
            \} else if(i==1) \{
                fill(255, 255 , 0, d(leds\[i\]));
                label = \"W\";
                colorName = \"Yellow\";
            \} else \{
                fill(0, 255, 255, d(leds\[i\]));
                label = \"E\";
                colorName = \"Cyan\";
            \}
            if(leds\[i\].isAnimating()) \{
                ellipse(pingBands\[i\] * barWidth, height-pingAdjusts\[i\], 100, 100);
                text(String.format(\"=%s=\", label), 
                        pingBands\[i\] * barWidth - 15, 
                        height-pingAdjusts\[i\]-i(leds\[i\]));
            \} else \{
                if(i==0) \{
                    fill(255, 0 , 0);
                \} else if(i==1) \{
                    fill(255, 255 , 0);
                \} else \{
                    fill(0, 255, 255);
                \}
                ellipse(pingBands\[i\] * barWidth, height-pingAdjusts\[i\], 7, 7);
            \}
            printFreqPowerInfo(20 + i*200, height - 320, 
                    pingBands\[i\], pingFreqs\[i\], pingPowers\[i\], pingAdjusts\[i\], 
                    String.format(\"%d %s %s\", i, label, colorName));
        \}
    \}
    
    void printFreqPowerInfo(int leftX, int bottomY, int freqBand, int freq, double power, int adjustedPower, String label) \{
        noStroke();
        if(label != null) \{
            text(label, leftX + 5, bottomY - 57);
        \}
        if(freqBand < Integer.MAX_VALUE) \{
            text(String.format(\"Band:  %d\", freqBand), leftX + 5, bottomY - 44);
            text(String.format(\"Frequency:  ~%dHz\", freq), leftX + 5, bottomY - 31);
            text(String.format(\"Adjusted power:  %.0f\", power), leftX + 5, bottomY - 18);
            text(String.format(\"Raw power:  %dcans\", adjustedPower), leftX + 5, bottomY - 5);
        \}
    \}
    
    double adjustPower(double power) \{
        return (30.0 * log(power * 100.0));
    \}
    
    double deAdjustPower(double adjustedPower) \{
        return exp(adjustedPower/30.0)/100;
    \}
    
"
    .fft-in "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
SKukOL6Ikjjfqd45hwxpOFBoIzhFgSg="
    .smoothing 0.5
  }
  @ ./ping-0 core:routing:send {
    #%graph.x 680
    #%graph.y 34
    .address /video/ping-control.ping-0-red-in
  }
  @ ./ping-1 core:routing:send {
    #%graph.x 680
    #%graph.y 84
    .address /video/ping-control.ping-1-yellow-in
  }
  @ ./ping-2 core:routing:send {
    #%graph.x 680
    #%graph.y 134
    .address /video/ping-control.ping-2-cyan-in
  }
  @ ./start-trigger core:start-trigger {
    #%graph.x 175
    #%graph.y 625
  }
  @ ./bw-0 core:routing:send {
    #%graph.x 881
    #%graph.y 121
    .address /video/bw/ping-control.ping-0-red-in
  }
  @ ./bw-1 core:routing:send {
    #%graph.x 881
    #%graph.y 171
    .address /video/bw/ping-control.ping-1-yellow-in
  }
  @ ./bw-2 core:routing:send {
    #%graph.x 881
    #%graph.y 221
    .address /video/bw/ping-control.ping-2-cyan-in
  }
  @ ./clouds-0 core:routing:send {
    #%graph.x 1056
    #%graph.y 121
    .address /video/clouds/ping-control.ping-0-red-in
  }
  @ ./clouds-1 core:routing:send {
    #%graph.x 1056
    #%graph.y 171
    .address /video/clouds/ping-control.ping-1-yellow-in
  }
  @ ./clouds-2 core:routing:send {
    #%graph.x 1056
    #%graph.y 221
    .address /video/clouds/ping-control.ping-2-cyan-in
  }
  @ ./colours-0 core:routing:send {
    #%graph.x 1257
    #%graph.y 121
    .address /video/colours/ping-control.ping-0-red-in
  }
  @ ./colours-1 core:routing:send {
    #%graph.x 1257
    #%graph.y 171
    .address /video/colours/ping-control.ping-1-yellow-in
  }
  @ ./colours-2 core:routing:send {
    #%graph.x 1257
    #%graph.y 221
    .address /video/colours/ping-control.ping-2-cyan-in
  }
  ~ ./eq!ping-0 ./ping-0!in
  ~ ./eq!ping-1 ./ping-1!in
  ~ ./eq!ping-2 ./ping-2!in
  ~ ./eq!out ./screen!in
  ~ ./start-trigger!out ./eq!reset
  ~ ./eq!ping-0 ./bw-0!in
  ~ ./eq!ping-1 ./bw-1!in
  ~ ./eq!ping-2 ./bw-2!in
  ~ ./eq!ping-0 ./clouds-0!in
  ~ ./eq!ping-1 ./clouds-1!in
  ~ ./eq!ping-2 ./clouds-2!in
  ~ ./eq!ping-0 ./colours-0!in
  ~ ./eq!ping-1 ./colours-1!in
  ~ ./eq!ping-2 ./colours-2!in
}
