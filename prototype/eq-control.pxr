@ /eq-control root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 960
  .height 300
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 617
    #%graph.y -108
    .always-on-top true
    .show-cursor true
  }
  @ ./eq video:gl:p2d {
    #%graph.x 432
    #%graph.y 251
    .code "

    @P(1) @OnChange(\"processFFT\") float\[\] fftIn;
    @P(2) @Type.Number(def=0.2, min=0, max=1) double smoothing;
    
    @P(5) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil0;
    @P(6) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil1;
    @P(7) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil2;
    
    float\[\] fft;
    int maxFFT;
    final int MAX_FREQ = 10910;
    double barWidth;
    
    private final static int PINGS_COUNT = 3;
    @P(13) @ReadOnly int\[\] pingBands; // Frequency bands
    @P(10) @ReadOnly int\[\] pingFreqs;   // Frequencies
    @P(11) @ReadOnly double\[\] pingPowers;      // Input, raw power
    @P(12) @ReadOnly int\[\] pingAdjusts; // Adjusted power
    
    @Out(0) Output ping0;
    @Out(1) Output ping1;
    @Out(2) Output ping2;
    
    @Inject @Type.Number Property led0;
    @Inject @Type.Number Property led1;
    @Inject @Type.Number Property led2;
    
    // TODO: ping coverage (grab 1, 2 or three bands)
    
    Output\[\] pings;
    Property\[\] leds;
    Property\[\] recoils;
    
    
    @Override
    public void setup() \{
        pings = new Output\[\] \{ ping0, ping1, ping2 \};
        leds = new Property\[\] \{ led0, led1, led2 \};
        recoils = new Property\[\] \{ recoil0, recoil1, recoil2 \};
        rectMode(CORNERS);
        ellipseMode(CENTER);
        strokeWeight(1);
    \}
    
    @T(0) void reset() \{
        pingBands = new int\[PINGS_COUNT\];
        pingFreqs = new int\[PINGS_COUNT\];
        pingPowers = new double\[PINGS_COUNT\];
        pingAdjusts = new int\[PINGS_COUNT\];
        Arrays.fill(pingBands, Integer.MAX_VALUE);
        Arrays.fill(pingFreqs, Integer.MAX_VALUE);
        Arrays.fill(pingPowers, Double.MAX_VALUE);
        Arrays.fill(pingAdjusts, Integer.MAX_VALUE);
    \}

    void processFFT() \{
        if(null == fft) \{
            fft = fftIn;
        \}
        maxFFT = fftIn.length/2;
        float\[\] newFFT = new float\[maxFFT\];
        float s = (float) smoothing;
        try \{
            for (int i=0; i<maxFFT; ++i) \{
                newFFT\[i\] = fft\[i\]*s + fftIn\[i\]*(1-s);
            \}
        \} catch (ArrayIndexOutOfBoundsException e) \{
            log(WARNING, \"Something weird in processFFT()  - try reset button\");
        \} finally \{
            fft = newFFT;
        \}
    \}
    

    @Override
    public void draw() \{
        if(null == fft || fft.length == 0 || 0 == maxFFT) \{
            log(WARNING, \"No signal yet received - ignore if doesn't repeat\");
            return;
        \}
        fill(255);
        stroke(255);
        boolean mouseHit = false;
        int eqWidth = width;
        barWidth = (eqWidth)/(maxFFT);
        for(int i = 0; i<maxFFT; ++i) \{
            float amp = fft\[i\];
            double displayAmp = adjustPower(amp);
            double left = barWidth*i;
            double right = barWidth*i + barWidth;
            rect(left+1, height, right-1, height-displayAmp);
            if(left <= mouseX && right >= mouseX && displayAmp > height - mouseY) \{
                mouseHit = true;
            \}
            checkPings(amp, i);  // should go to processFFT
        \}
        
        drawPings();
        
        fill(255);
        text(String.format(\"FFT Bands: %d\", maxFFT), width - 130, height - 20);
        
        stroke(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        fill(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        if (pmouseX < eqWidth) \{
            line(pmouseX, 0, pmouseX, height);
            line(0, pmouseY, eqWidth, pmouseY);
            int freqBand = (int) (pmouseX / barWidth);
            int freq = (int) (MAX_FREQ * (double)pmouseX / eqWidth);
            int adjustedPowerMouse = height-pmouseY;
            double powerMouse = deAdjustPower(adjustedPowerMouse);
            
            printFreqPowerInfo(pmouseX, pmouseY, 
                    freqBand, freq, powerMouse, adjustedPowerMouse, null);
            
            // update pingsw
            if(keyPressed) \{
                int pingNo = -1;
                if (key == 'q' || key == 'Q') \{
                    pingNo = 0;
                \} else if (key == 'w' || key == 'W') \{
                    pingNo = 1;
                \} else if (key == 'e' || key == 'E') \{
                    pingNo = 2;
                \} 
                    
                if(pingNo > -1) \{
                    text(String.format(\"Ping-%d\",pingNo), pmouseX-50, pmouseY-5);
                    if (mousePressed) \{
                        pingBands\[pingNo\] = freqBand;
                        pingFreqs\[pingNo\] = freq;
                        pingPowers\[pingNo\] = powerMouse;
                        pingAdjusts\[pingNo\] = adjustedPowerMouse;
                    \}
                \}
            \}
        \}
        
        noFill();
        stroke(0, 30, 0);
        rect(0, 0, width-1, height-1);
    \}
    
    void checkPings(double power, int band) \{
        try \{
            for (int i=0; i<PINGS_COUNT; ++i) \{
                if(power >= pingPowers\[i\] && band == pingBands\[i\] && !leds\[i\].isAnimating()) \{
                    leds\[i\].set(255).to(0).in(d(recoils\[i\])).easing(Easing.cubicIn);
                    pings\[i\].send();
                \}
            \}
        \} catch(ArrayIndexOutOfBoundsException e) \{
            log(WARNING, \"Something weird in checkPings()  - try reset button\");
        \}
    \}
    
    void drawPings() \{
        noStroke();
        for(int i=0; i<PINGS_COUNT; ++i) \{
            String label;
            String colorName;
            if(i==0) \{
                fill(255, 0 , 0, d(leds\[i\]));
                label = \"Q\";
                colorName = \"Red\";
            \} else if(i==1) \{
                fill(255, 255 , 0, d(leds\[i\]));
                label = \"W\";
                colorName = \"Yellow\";
            \} else \{
                fill(0, 255, 255, d(leds\[i\]));
                label = \"E\";
                colorName = \"Cyan\";
            \}
            if(leds\[i\].isAnimating()) \{
                ellipse(pingBands\[i\] * barWidth, height-pingAdjusts\[i\], 100, 100);
                text(String.format(\"=%s=\", label), 
                        pingBands\[i\] * barWidth - 15, 
                        height-pingAdjusts\[i\]-i(leds\[i\]));
            \} else \{
                if(i==0) \{
                    fill(255, 0 , 0);
                \} else if(i==1) \{
                    fill(255, 255 , 0);
                \} else \{
                    fill(0, 255, 255);
                \}
                ellipse(pingBands\[i\] * barWidth, height-pingAdjusts\[i\], 7, 7);
            \}
            printFreqPowerInfo(400 + i*200, 80, 
                    pingBands\[i\], pingFreqs\[i\], pingPowers\[i\], pingAdjusts\[i\], 
                    String.format(\"%d %s %s\", i, label, colorName));
        \}
    \}
    
    void printFreqPowerInfo(int leftX, int bottomY, int freqBand, int freq, double power, int adjustedPower, String label) \{
        noStroke();
        if(label != null) \{
            text(label, leftX + 5, bottomY - 57);
        \}
        if(freqBand < Integer.MAX_VALUE) \{
            text(String.format(\"Band:  %d\", freqBand), leftX + 5, bottomY - 44);
            text(String.format(\"Frequency:  ~%dHz\", freq), leftX + 5, bottomY - 31);
            text(String.format(\"Adjusted power:  %.0f\", power), leftX + 5, bottomY - 18);
            text(String.format(\"Raw power:  %dcans\", adjustedPower), leftX + 5, bottomY - 5);
        \}
    \}
    
    double adjustPower(double power) \{
        return (30.0 * log(power * 100.0));
    \}
    
    double deAdjustPower(double adjustedPower) \{
        return exp(adjustedPower/30.0)/100;
    \}
    
"
    .fft-in "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
hDexOAxo5Tg/3IQ35ctaOIwsQTglV3c="
    .smoothing .5
    .recoil-0 0.37399561723886054
  }
  @ ./ping-0 core:routing:send {
    #%graph.x 680
    #%graph.y 34
    .address /video/ping-control.ping-0-red-in
  }
  @ ./ping-1 core:routing:send {
    #%graph.x 680
    #%graph.y 84
    .address /video/ping-control.ping-1-yellow-in
  }
  @ ./ping-2 core:routing:send {
    #%graph.x 680
    #%graph.y 134
    .address /video/ping-control.ping-2-cyan-in
  }
  @ ./start-trigger core:start-trigger {
    #%graph.x 163
    #%graph.y 448
  }
  @ ./bw-0 core:routing:send {
    #%graph.x 881
    #%graph.y 121
    .address /video/bw/ping-control.ping-0-red-in
  }
  @ ./bw-1 core:routing:send {
    #%graph.x 881
    #%graph.y 171
    .address /video/bw/ping-control.ping-1-yellow-in
  }
  @ ./bw-2 core:routing:send {
    #%graph.x 881
    #%graph.y 221
    .address /video/bw/ping-control.ping-2-cyan-in
  }
  @ ./clouds-0 core:routing:send {
    #%graph.x 1056
    #%graph.y 121
    .address /video/clouds/ping-control.ping-0-red-in
  }
  @ ./clouds-1 core:routing:send {
    #%graph.x 1056
    #%graph.y 171
    .address /video/clouds/ping-control.ping-1-yellow-in
  }
  @ ./clouds-2 core:routing:send {
    #%graph.x 1056
    #%graph.y 221
    .address /video/clouds/ping-control.ping-2-cyan-in
  }
  @ ./colours-0 core:routing:send {
    #%graph.x 1257
    #%graph.y 121
    .address /video/colours/ping-control.ping-0-red-in
  }
  @ ./colours-1 core:routing:send {
    #%graph.x 1257
    #%graph.y 171
    .address /video/colours/ping-control.ping-1-yellow-in
  }
  @ ./colours-2 core:routing:send {
    #%graph.x 1257
    #%graph.y 221
    .address /video/colours/ping-control.ping-2-cyan-in
  }
  @ ./videos-0 core:routing:send {
    #%graph.x 1454
    #%graph.y 121
    .address /video/videos/ping-control.ping-0-red-in
  }
  @ ./videos-1 core:routing:send {
    #%graph.x 1454
    #%graph.y 171
    .address /video/videos/ping-control.ping-1-yellow-in
  }
  @ ./videos-2 core:routing:send {
    #%graph.x 1454
    #%graph.y 221
    .address /video/videos/ping-control.ping-2-cyan-in
  }
  ~ ./eq!ping-0 ./ping-0!in
  ~ ./eq!ping-1 ./ping-1!in
  ~ ./eq!ping-2 ./ping-2!in
  ~ ./eq!out ./screen!in
  ~ ./start-trigger!out ./eq!reset
  ~ ./eq!ping-0 ./bw-0!in
  ~ ./eq!ping-1 ./bw-1!in
  ~ ./eq!ping-2 ./bw-2!in
  ~ ./eq!ping-0 ./clouds-0!in
  ~ ./eq!ping-1 ./clouds-1!in
  ~ ./eq!ping-2 ./clouds-2!in
  ~ ./eq!ping-0 ./colours-0!in
  ~ ./eq!ping-1 ./colours-1!in
  ~ ./eq!ping-2 ./colours-2!in
  ~ ./eq!ping-0 ./videos-0!in
  ~ ./eq!ping-1 ./videos-1!in
  ~ ./eq!ping-2 ./videos-2!in
}
