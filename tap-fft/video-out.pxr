@ /video-out root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 1920
  .height 1200
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 1055
    #%graph.y -21
    .device 2
    .always-on-top true
    .undecorated true
    .show-cursor true
  }
  @ ./levels video:gl:p2d {
    #%graph.x 75
    #%graph.y 29
    .code "

    @P(1) @OnChange(\"processFFT\") float\[\] fftIn;
    @P(2) @Type.Number(def=0.2, min=0, max=1) double smoothing;
    
    float\[\] fft;
    int maxFFT;
    final int MAX_FREQ = 10910;
    
    @P(10) int strobeFreq = Integer.MAX_VALUE;
    @P(11) double strobePower = Double.MAX_VALUE; 
    @P(12) int strobePowerAdjusted = Integer.MAX_VALUE;
    @P(13) int strobeFreqBand = Integer.MAX_VALUE;
    
    @Inject Property bgStrobe;
    @Inject Property fgStrobe;
    
    
    @Override
    public void setup() \{
        rectMode(CORNERS);
        ellipseMode(CENTER);
    \}

    void processFFT() \{
        if(null == fft) \{
            fft = fftIn;
        \}
        maxFFT = fftIn.length/2;
        float\[\] newFFT = new float\[maxFFT\];
        float s = (float) smoothing;
        for (int i=0; i<maxFFT; ++i) \{
            newFFT\[i\] = fft\[i\]*s + fftIn\[i\]*(1-s);
        \}
    \}
    

    @Override
    public void draw() \{
        if(null == fft || fft.length == 0) \{
            return;
        \}
        strokeWeight(1);
        fill(255);
        stroke(255);
        boolean mouseHit = false;
        int eqWidth = width - 400;
        int bar = (width - 100)/(maxFFT);
        for(int i = 0; i<maxFFT; ++i) \{
            float amp = fft\[i\];
            double displayAmp = (30.0 * log(amp * 100.0));
            int left = bar*i;
            int right = bar*i+bar;
            rect(left+1, height, right-1, height-displayAmp);
            if(left <= mouseX && right >= mouseX && displayAmp > height - mouseY) \{
                mouseHit = true;
            \}
            if(amp >= strobePower && i == strobeFreqBand && !bgStrobe.isAnimating()) \{
                bgStrobe.set(135).to(0).in(0.2).easeIn();
                ellipse((left+right)/2, height-displayAmp, 100, 100);
            \}
        \}
        fill(255);
        text(String.format(\"FFT Bands: %d\", maxFFT), width - 100, height - 20);
        printFreqPowerInfo(width - 300, height - 300, strobeFreqBand, strobeFreq, strobePower, strobePowerAdjusted);
        
        strokeWeight(0.5);
        stroke(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        if (pmouseX < eqWidth) \{
            line(pmouseX, 0, pmouseX, height);
            line(0, pmouseY, eqWidth, pmouseY);
            int freqBand = maxFFT * pmouseX / eqWidth;
            int freq = MAX_FREQ * pmouseX / eqWidth;
            int adjustedPowerMouse = height-pmouseY;
            double powerMouse = exp((double)adjustedPowerMouse/30.0)/100;
            
            printFreqPowerInfo(pmouseX, pmouseY, freqBand, freq, powerMouse, adjustedPowerMouse);
            if (mousePressed) \{
                strobeFreq = freq;
                strobePower = powerMouse;
                strobePowerAdjusted = adjustedPowerMouse;
                strobeFreqBand = freqBand;
            \}
        \}
    \}
    
    void printFreqPowerInfo(int leftX, int bottomY, int freqBand, int freq, double power, int adjustedPower) \{
        noStroke();
        fill(0, 60);
        rect(leftX + 2, bottomY - 2, leftX + 170, bottomY - 56);
        fill(0, 255, 0);
        text(String.format(\"Band:  %d\", freqBand), leftX + 5, bottomY - 44);
        text(String.format(\"Frequency:  ~%dHz\", freq), leftX + 5, bottomY - 31);
        text(String.format(\"Adjusted power:  %.0f\", power), leftX + 5, bottomY - 18);
        text(String.format(\"Raw power:  %dcans\", adjustedPower), leftX + 5, bottomY - 5);
    \}
"
    .fft-in "rO0ABXVyAAJbRgucgYki4AxCAgAAeHAAAAQAPmivvj60kAg/ielNQtG5TT+EfN8+Yb+hP9CkVD51
CeI96dWFQSGvKD7HhzNCFYZ8QRLQkT8p/YxBMhKpQIuCPj7E/b8+U/u7QIejnj7kmac+k2a+PjW+
TD5JTTc9JCqYPe0xjT3UTGw89hU6PPLftDuJTn09LYjtPHE/xjyYbjM70ualPIM0nTy45HI8T85g
PAYUJDwja9w76MPiPAZUpDwfTkM7nm/MO6gwXTvdvx87yIwWO5cNJDwIFSc7+EcUO4d5SDu37PU7
lnKJO3SKczuZeyE7fc4mO42zjTuM4hA7Z0DoO1my2zthPyQ7WwOOOzcGTTtUS8E7RC0pOzDuRzsm
pVM7KE/lOxWotDs504s7GaW8OwxKnTsG+BU7EIhLOvxuUTsA7M87DMZKOwTWpzsEugY6+NArOvEq
SjriN/Q6yKtWOtEYzzrgADA6wbMYOtIvizrM7t860R8IOrNC7jq31pY6yoApOq0xjTqeLU86mqq3
OqiR4jqgLjc6ovcoOpfhrDqa75w6knF/Oo5mejqCgMo6YZV2OlbWQDqF+tw6d8lBOnMnjjpqg+A6
f9EmOjr6wjpsBz86XbcAOm7XbjpuFaA6ezl3Om41MzpFpsk6XV91Ojy8sTo+rOU6Tpm5OkBkUzo+
Nyk6XEp9OiHkRzoluxo6RE4SOhOirjohKtw6MtjeOgKp3ToQkhA6G3UpOhDv0jocjYg6A6uOOi7x
8DoZnFg6F2SaOhJn1TothQs6GyF3OgomdToDfxw6B06nOfK7Vjn6dKk54b/gOehk1jnx1PE519SZ
OdvEXjnm9Aw5/VX7OgHBRjnX2Do5ymPGOcvezjnuZxo53ki2Oca7mDmsEzM5wluuObxwcznFsrI5
8kYFOdgrKznraUI5nkEROd4B4zm0ebk5qnnUObeJ3jmq5805sLA1OapmPjmn/Yk5mMLHObjPRjmM
aFE5lroCOYPeWDmwcjI52xs4Oaq7sjmZXgI5kg8IOavAMjmcfOM5qNPzOaT8MzmiwEM5r6taOZyu
vTmjAA85hktAOYh54DmAa3Q5ocVgOXkqmDmRyNE5qvgMOXYrIjmUFAI5cTs1OY5P0Dl4PJg5gxcq
OaFL6TlHgDY5lJ5kOZHHJTlkZ505bm3YOWneQTlMXzc5hNNMOV1nZjlwwLI5UgmxOXg4oDlp5X45
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
+fsXN6bCcjf5AYg4DcLiN8K1nw=="
    .smoothing 0.5
    .strobe-freq 4299
    .strobe-power 233630.59209640152
    .strobe-power-adjusted 509
    .strobe-freq-band 201
  }
  @ ./voronoi-p2d video:gl:p2d {
    #%graph.x 1222
    #%graph.y 77
    .code "import org.kynosarges.tektosyne.geometry.*;
import java.util.concurrent.CopyOnWriteArrayList;


    static final int MAX_CELLS_COUNT = 7;
    static final double EDGE_THRESHOLD = 0.1;
    static final String ALL = \"All\";
    static final String ONE_BY_ONE = \"One by one\";
    static final String RANDOMLY = \"Random\";
    
    @In(0) PImage in0;
    @In(1) PImage in1;
    @In(2) PImage in2;
    @In(3) PImage in3;
    @In(4) PImage inEdges;
    
    @OffScreen(persistent = false) PGraphics2D out0, out1, out2, out3, outEdges;
    
    @P(0) @Type.String(allowed = \{ALL, ONE_BY_ONE, RANDOMLY\}, def = RANDOMLY) String movements;
    @P(1) @Type.Number(def = 80, min = 0, max = 1000, skew=2) double movementSpeed;
    @P(2) @Type.Number(def = 1, min = 0, max = 15, skew=1.5) double timeToMove;
    
    @P(3) @Type.Integer(def = 6, min = 2, max = MAX_CELLS_COUNT) @OnChange(\"updateCellsCount\") int cellsCount;
    
    @P(4) @Type.Number(def = 3, min = 0, max = 1000, skew=4) @OnChange(\"updateClipRect\") double edgeWidth;
    
    @P(10) @Type.Integer(def = 0, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell0InputNo;
    @P(11) @Type.Integer(def = 1, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell1InputNo;
    @P(12) @Type.Integer(def = 2, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell2InputNo;
    @P(13) @Type.Integer(def = 3, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell3InputNo;
    @P(14) @Type.Integer(def = 0, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell4InputNo;
    @P(15) @Type.Integer(def = 1, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell5InputNo;
    @P(16) @Type.Integer(def = 2, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell6InputNo;

    @P(17) @Type.Boolean(def = false) boolean drawCenters;
    
    @P(18) @Type.Boolean(def = true) boolean justColours;
    
    @Inject Ref<List<PVector>> coloursRef;
    
    List<Cell> cells = new ArrayList<>();
    
    // Last moved cell number
    int lastMoved = -1;
    
    // Current state of cells geometry
    VoronoiResults results;
    
    // Current coordinates of cells centers
    @Inject Ref<List<PointD>> pointsRef;
    
    // Target coordinates of cells
    @Inject Property m0x, m1x, m2x, m3x, m4x, m5x, m6x;
    @Inject Property m0y, m1y, m2y, m3y, m4y, m5y, m6y;

    
    
    // Initialisation

    @Override public void setup() \{
        initRefs();
        updateCellsInputs();
        updateCellsCount();

        smooth();
        background(0);
    \}
    
    void initRefs() \{ 
        coloursRef.init(ArrayList::new);
        coloursRef.apply(list -> \{
            while(list.size() < MAX_CELLS_COUNT) \{
                list.add(new PVector(random(255), random(255), random(255)));
//                list.add(new PVector(255, 255, 255));
            \}
        \});
        pointsRef.init(CopyOnWriteArrayList::new);
    \}
    
    void updateCellsInputs() \{
        int\[\] cellInputNos = new int\[\] \{ cell0InputNo, cell1InputNo, cell2InputNo, cell3InputNo, cell4InputNo, cell5InputNo, cell6InputNo \};
        PGraphics2D\[\] outs = \{ null, out0, out1, out2, out3 \};
        PImage\[\] ins = \{ null, in0, in1, in2, in3 \};
        Property\[\]\[\] moves = \{ \{m0x, m0y\}, \{m1x, m1y\}, \{m2x, m2y\},
            \{m3x, m3y\}, \{m4x, m4y\}, \{m5x, m5y\}, \{m6x, m6y\} \};

        List<Cell> newCells = new ArrayList<>();
        for(int i=0; i<MAX_CELLS_COUNT; ++i) \{
            int inputNo = cellInputNos\[i\];
            newCells.add(new Cell(
                    newCells.size(),
                    Optional.ofNullable(ins\[inputNo + 1\]), 
                    Optional.ofNullable(outs\[inputNo + 1\]), 
                    coloursRef.get().get(i),
                    moves\[i\]\[0\],
                    moves\[i\]\[1\]));
        \}
        cells = newCells;
    \}
    
    void updateCellsCount() \{
        pointsRef.apply(points -> \{
            int oldSize = points.size();
            if (oldSize != cellsCount) \{
                RectD clipRect = new RectD(0 - edgeWidth/2, 0 - edgeWidth/2, width + edgeWidth/2, height + edgeWidth/2);
                if (oldSize < cellsCount) \{
                    PointD\[\] newPoints = GeoUtils.randomPoints(cellsCount - oldSize, clipRect, new PointDComparatorY(0), 10);
                    points.addAll(Arrays.asList(newPoints));
                \} else \{
                    points.subList(cellsCount, oldSize).clear();
                \}
                results = Voronoi.findAll(points.toArray(new PointD\[0\]), clipRect);        

                // set coordinates of new cells if added
                for(int i = oldSize; i < points.size(); ++i) \{
                    PointD point = points.get(i);
                    cells.get(i).jumpTo(point.x, point.y);
                \}
            \}
        \});
    \}

    
    
    // Drawing
    
    @Override public void draw() \{
        updateCellsGeometry();
        cells.subList(0, cellsCount).forEach(this::drawCell);
        drawCenters(outEdges);
        drawEdges(inEdges, outEdges);
    \}
    
    void updateCellsGeometry() \{
        boolean moved = false;
        for(int i=0; i<cellsCount; ++i) \{
            PointD oldPoint = pointsRef.get().get(i);
            PointD newPoint = new PointD(d(cells.get(i).moveX), d(cells.get(i).moveY));
            boolean pointMoved = abs(oldPoint.x - newPoint.x) > 1 || abs(oldPoint.y - newPoint.y) > 1;
            if(pointMoved) \{
                pointsRef.get().set(i, newPoint);
                moved = true;
            \}
        \}
        if(moved || results == null) \{
            RectD clipRect = new RectD(0 - edgeWidth/2, 0 - edgeWidth/2, width + edgeWidth/2, height + edgeWidth/2);
            results = Voronoi.findAll(pointsRef.get().toArray(new PointD\[0\]), clipRect);
        \}
    \}
    
    void drawCell(Cell cell) \{
        cell.out.ifPresent(out -> cell.in.ifPresent( in -> \{
            out.beginDraw();
            out.clear();
            out.blendMode(BLEND);
             // if no edges, expanding mask by one pixel to avoid artifacts
            out.strokeWeight(edgeWidth > EDGE_THRESHOLD ? edgeWidth : 1);

            PointD\[\] region = results.voronoiRegions()\[cell.no\];
            double\[\] coords = PointD.toDoubles(region);
            PVector c = cell.colour;
            if (justColours) \{
                out.fill(c.x, c.y, c.z);
                out.stroke(c.x, c.y, c.z);
            \} else \{
                out.fill(255);
                out.stroke(0);
            \}

            out.beginShape();
            for(int i=0; i<coords.length/2; i+=1) \{
                out.vertex(coords\[i*2\], coords\[i*2+1\]);
            \}
            out.endShape(CLOSE);
            
            if (!justColours) \{
                out.blendMode(MULTIPLY);
                out.image(in, 0, 0);
            \}
            out.endDraw();
            blendMode(ADD);
            image(out, 0, 0);
        \}));
    \}
    
    void drawCenters(PGraphics2D out) \{
        if(drawCenters) \{
            out.beginDraw();
            out.blendMode(BLEND);
            out.fill(255);
            out.noStroke();
            
            double dotSize = 20;
            for (PointD point: pointsRef.get()) \{
                out.rect(point.x-dotSize/2, point.y-dotSize/2, dotSize, dotSize);
            \}

            out.endDraw();
            blendMode(ADD);
            image(out, 0, 0);
        \}
    \}
    
    void drawEdges(PImage in, PGraphics2D out) \{
        if(edgeWidth > EDGE_THRESHOLD) \{
            out.beginDraw();
            out.blendMode(BLEND);
            out.strokeWeight(edgeWidth);
            out.stroke(255);
            
            for (VoronoiEdge edge: results.voronoiEdges) \{
                final PointD start = results.voronoiVertices\[edge.vertex1\];
                final PointD end = results.voronoiVertices\[edge.vertex2\];

                out.line(start.x, start.y, end.x, end.y);
            \}
            
            if (!justColours) \{
                out.blendMode(MULTIPLY);
                out.image(in, 0, 0);
            \}
            out.endDraw();
            blendMode(ADD);
            image(out, 0, 0);
        \}
    \}

    

    // Cell movement
    
    @T(1) public void moveCells() \{
        if (movements.equals(ALL)) \{
            cells.forEach(this::moveCell);
        \} else if (movements.equals(ONE_BY_ONE)) \{
            if(lastMoved < 0 || lastMoved >= cellsCount) \{
                lastMoved = 0;
            \}
            moveCell(cells.get(lastMoved++));
        \} else if (movements.equals(RANDOMLY)) \{
            cells.stream()
                    .filter(c -> random(1) > 0.5)
                    .forEach(this::moveCell);
        \}
    \}
    
    void moveCell(Cell cell) \{
        double nx, ny;
        double deltaMove = movementSpeed;

        // ensure new coordinate is inside viewport
        do \{
            double alpha = random(PI*2);
            nx = cell.x() + cos(alpha) * deltaMove;
            ny = cell.y() + sin(alpha) * deltaMove;
            deltaMove *= 0.7; // slow down to avoid infinite loop
        \} while (nx < 0 || nx > width || ny < 0 || ny > height);

        cell.startMovingTo(nx, ny, timeToMove);
    \}

    
    
    
    // Cell container

    static class Cell \{
        final int no;
        final Optional<PImage> in;
        final Optional<PGraphics2D> out;
        final PVector colour;
        final Property moveX;
        final Property moveY;
        
        Cell(int no, Optional<PImage> in, Optional<PGraphics2D> out, PVector colour, 
                Property moveX, Property moveY) \{
            this.no = no;
            this.in = in;
            this.out = out;
            this.colour = colour;
            this.moveX = moveX;
            this.moveY = moveY;
        \}
        
        double x() \{
            return moveX.getDouble();
        \}
        
        double y() \{
            return moveY.getDouble();
        \}
        
        void startMovingTo(double x, double y, double timeToMove) \{
            moveX.to(x).in(timeToMove).easing(Easing.cubicOut);
            moveY.to(y).in(timeToMove).easing(Easing.cubicOut);
        \}
        
        void jumpTo(double x, double y) \{
            moveX.set(x);
            moveY.set(y);
        \}
    \}
"
    .movements All
    .movement-speed 140
    .time-to-move 0.4
    .cells-count 7
    .edge-width 17.8642124095088
    .just-colours false
  }
  @ ./taptempo core:custom {
    #%graph.x 75
    #%graph.y 468
    #%graph.colors Orange
    .code "

    @P(1) @Type.Number(min = 0.001, max = 60, def = 1)
    double period;

    @P(2) @Type.Number @ReadOnly
    Property time;

    @P(3) @Type.Boolean() boolean playing = true;

    @Out(1) Output trig;
    @Out(2) Output unit;

    @Inject Property chrono;

    final int ARRAY_SIZE = 5;
    double\[\] timeArray = new double\[ARRAY_SIZE\];

    @Override
    public void update() \{
        if (!time.isAnimating() && playing) \{
            time.set(0).to(1).in(period);
            trig.send(1.0);
        \}
        unit.send(d(time));
    \}

    @T(0) void tap()\{
        if(d(chrono) < 12)\{
            for(int i = ARRAY_SIZE-1; i > 0; i--)\{
                timeArray\[i\] = timeArray\[i-1\];
            \}
            timeArray\[0\] = d(chrono);
            double _sum = 0;
            for(int i = 0; i < ARRAY_SIZE; i++)\{
                _sum += timeArray\[i\];
            \}
            period = (_sum/ARRAY_SIZE);
            time.animator().in(period);
        \}
        chrono.set(0).to(1000).in(1000);
    \}
    
    @T(1) void trigger()\{
        time.set(0).to(1).in(period);
        trig.send(1.0);
    \}
"
    .period 0.0033089666
    .playing true
  }
  @ ./colour1 video:gl:p2d {
    #%graph.x 348
    #%graph.y -52
    .code "import java.awt.Color;


    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .red 201.0
    .green 89.11290322580646
    .blue 32.90322580645161
    .hue 0.05621302127838135
    .saturation 0.8407959938049316
    .brightness 0.7882353067398071
    .fragment "uniform vec3 colour;

void main() \{
    gl_FragColor = vec4( colour.x/255, colour.y/255, colour.z/255, 1.0 );
\}"
  }
  @ ./colour2 video:gl:p2d {
    #%graph.x 429
    #%graph.y 4
    .code "import java.awt.Color;


    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .red 201.0
    .green 145.0
    .blue 222.09677419354838
    .hue 0.7878787517547607
    .saturation 0.3468468487262726
    .brightness 0.8705882430076599
    .fragment "uniform vec3 colour;

void main() \{
    gl_FragColor = vec4( colour.x/255, colour.y/255, colour.z/255, 1.0 );
\}"
  }
  @ ./strobe video:gl:p2d {
    #%graph.x 601
    #%graph.y 137
    .code "import java.awt.Color;

    @P(0) @Type.Number(min = 0, max = 1) double ease;
    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    
    @Inject Property strobeBrightness;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"brightness\", d(strobeBrightness));
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}
    
    @T(0) void strobe() \{
        strobeBrightness.set(1);
        strobeBrightness.to(0).in(ease).easing(Easing.cubicIn);
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .ease 0.4
    .red 255.0
    .green 77.0
    .blue 200.0
    .hue 0.8846153846153846
    .saturation 0.6980392336845398
    .brightness 1.0
    .fragment "uniform vec3 colour;
uniform float brightness;

void main() \{
    gl_FragColor = vec4(
        colour.x/255*brightness,
        colour.y/255*brightness, 
        colour.z/255*brightness, 
        1.0
    );
\}"
  }
  @ ./strobe1 video:gl:p2d {
    #%graph.x 823
    #%graph.y 377
    .code "import java.awt.Color;

    @P(0) @Type.Number(min = 0, max = 1) double ease;
    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    
    @Inject Property strobeBrightness;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"brightness\", d(strobeBrightness));
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}
    
    @T(0) void strobe() \{
        strobeBrightness.set(1);
        strobeBrightness.to(0).in(ease).easing(Easing.cubicIn);
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .ease .2
    .red 98.0
    .green 255.0
    .blue 70.0
    .hue 0.3076923076923077
    .saturation 0.7254902124404907
    .brightness 1.0
    .fragment "uniform vec3 colour;
uniform float brightness;

void main() \{
    gl_FragColor = vec4(
        colour.x/255*brightness,
        colour.y/255*brightness, 
        colour.z/255*brightness, 
        1.0
    );
\}"
  }
  @ ./osc-receive core:custom {
    #%graph.x 111
    #%graph.y 327
    .code "import de.sciss.net.*;
import java.io.IOException;
import java.util.concurrent.ConcurrentLinkedQueue;


    @P(1) @Type.Integer(def = 3333) @Config.Port(false) @OnChange(\"resetServer\")
    int port;
    
    @Out(1) Output out;

    @Inject Ref<OSCServer> osc;
    @Inject Ref<Queue<OSCMessage>> queue;

    @Override 
    public void init() \{
        queue.init(ConcurrentLinkedQueue::new);
        initServer();
    \}

    @Override
    public void update() \{
        queue.ifPresent(q -> \{
            OSCMessage msg;
            while ((msg = q.poll()) != null) \{
                Value\[\] vals = new Value\[msg.getArgCount() + 1\];
                vals\[0\] = PString.valueOf(msg.getName());
                for (int i = 0; i < msg.getArgCount(); i++) \{
                    Object arg = msg.getArg(i);
                    if (arg instanceof Number) \{
                        vals\[i + 1\] = PNumber.valueOf(((Number) arg).doubleValue());
                    \} else \{
                        vals\[i + 1\] = PString.valueOf(arg.toString());
                    \}
                \}
                out.send(PArray.valueOf(vals));
            \}
        \});

    \}
    
    void initServer() \{
        osc.init(() -> \{
            try \{
                OSCServer s = OSCServer.newUsing(OSCServer.UDP, port);
                s.start();
                return s;
            \} catch (IOException ex) \{
                log(ERROR, ex);
                return null;
            \}
        \})
        .bind(OSCServer::addOSCListener, OSCServer::removeOSCListener,
                (msg, sa, l) -> queue.apply(q -> q.add(msg)))
        .onDispose(s -> s.dispose());
    \}
    
    void resetServer() \{
        osc.clear();
        initServer();
    \}


"
  }
  @ ./osc-filter core:custom {
    #%graph.x 305
    #%graph.y 452
    .code "

    @Out(0) Output edges;
    @Out(1) Output move;
    @Out(2) Output cell;
    

    @In(1) void in(PArray in) \{
//        StringBuilder sb = new StringBuilder(\"\[ \");
//        sb.append(in.stream().map(v -> v.toString()).collect(Collectors.joining(\", \")));
//        sb.append(\" \]\");
//        log(ERROR, sb.toString());
        
        Map<String, String> oscMap = new HashMap<>();
        for(int i=0; i<in.getSize()/1; i+=2) \{
            oscMap.put(in.get(i).toString(), in.get(i+1).toString());
        \}
        log(ERROR, oscMap.toString());
        
        matchAndSend(oscMap);
    \}

    void matchAndSend(Map<String, String> oscMap) \{
        // skip silence
        if (\"0.0\".equals(oscMap.get(\"gain\"))) \{
            return;
        \}
        
        Map<String, String> cellMap = new HashMap<>();
        cellMap.put(\"s\", \"nockicks\");
        
        Map<String, String> moveMap = new HashMap<>();
        moveMap.put(\"s\", \"tlvocals\");
//        moveMap.put(\"n\", \"8.0\");
        
        Map<String, String> edgesMap = new HashMap<>();
        edgesMap.put(\"s\", \"mdbrims\");
        
        if(oscMap.entrySet().containsAll(cellMap.entrySet())) \{
            cell.send();
        \} else if(oscMap.entrySet().containsAll(moveMap.entrySet())) \{
            move.send();
        \} else if(oscMap.entrySet().containsAll(edgesMap.entrySet())) \{
            edges.send();
        \}
    \}
"
  }
  ~ ./colour1!out ./voronoi-p2d!in-0
  ~ ./colour2!out ./voronoi-p2d!in-1
  ~ ./strobe!out ./voronoi-p2d!in-edges
  ~ ./strobe1!out ./voronoi-p2d!in-3
  ~ ./osc-receive!out ./osc-filter!in
  ~ ./colour2!out ./voronoi-p2d!in-2
  ~ ./osc-filter!move ./voronoi-p2d!move-cells
  ~ ./osc-filter!edges ./strobe!strobe
  ~ ./osc-filter!cell ./strobe1!strobe
  ~ ./levels!out ./screen!in
}
