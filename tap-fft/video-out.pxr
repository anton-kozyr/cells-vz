@ /video-out root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 1920
  .height 1200
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 1055
    #%graph.y -21
    .device 2
    .always-on-top true
    .undecorated true
    .show-cursor true
  }
  @ ./levels video:gl:p2d {
    #%graph.x 75
    #%graph.y 29
    .code "

    @P(1) @OnChange(\"processFFT\") float\[\] fftIn;
    @P(2) @Type.Number(def=0.2, min=0, max=1) double smoothing;
    
    float\[\] fft;
    int maxFFT;
    final int MAX_FREQ = 10910;
    
    @P(10) int strobeFreq = Integer.MAX_VALUE;
    @P(11) double strobePower = Double.MAX_VALUE; 
    @P(12) int strobePowerAdjusted = Integer.MAX_VALUE;
    @P(13) int strobeFreqBand = Integer.MAX_VALUE;
    
    @Inject Property bgStrobe;
    @Inject Property fgStrobe;
    
    
    @Override
    public void setup() \{
        rectMode(CORNERS);
        ellipseMode(CENTER);
    \}

    void processFFT() \{
        if(null == fft) \{
            fft = fftIn;
        \}
        maxFFT = fftIn.length/2;
        float\[\] newFFT = new float\[maxFFT\];
        float s = (float) smoothing;
        for (int i=0; i<maxFFT; ++i) \{
            newFFT\[i\] = fft\[i\]*s + fftIn\[i\]*(1-s);
        \}
    \}
    

    @Override
    public void draw() \{
//        if(null == fft || fft.length == 0) \{
//            return;
//        \}
        strokeWeight(1);
        fill(255);
        stroke(255);
        boolean mouseHit = false;
        int eqWidth = width - 400;
        int bar = (width - 100)/(maxFFT);
        for(int i = 0; i<maxFFT; ++i) \{
            float amp = fft\[i\];
            double displayAmp = (30.0 * log(amp * 100.0));
            int left = bar*i;
            int right = bar*i+bar;
            rect(left+1, height, right-1, height-displayAmp);
            if(left <= mouseX && right >= mouseX && displayAmp > height - mouseY) \{
                mouseHit = true;
            \}
            if(amp >= strobePower && i == strobeFreqBand && !bgStrobe.isAnimating()) \{
                bgStrobe.set(135).to(0).in(0.2).easeIn();
                ellipse((left+right)/2, height-displayAmp, 100, 100);
            \}
        \}
        fill(255);
        text(String.format(\"FFT Bands: %d\", maxFFT), width - 100, height - 20);
        printFreqPowerInfo(width - 300, height - 300, strobeFreqBand, strobeFreq, strobePower, strobePowerAdjusted);
        
        strokeWeight(0.5);
        stroke(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        if (pmouseX < eqWidth) \{
            line(pmouseX, 0, pmouseX, height);
            line(0, pmouseY, eqWidth, pmouseY);
            int freqBand = maxFFT * pmouseX / eqWidth;
            int freq = MAX_FREQ * pmouseX / eqWidth;
            int adjustedPowerMouse = height-pmouseY;
            double powerMouse = exp((double)adjustedPowerMouse/30.0)/100;
            
            printFreqPowerInfo(pmouseX, pmouseY, freqBand, freq, powerMouse, adjustedPowerMouse);
            if (mousePressed) \{
                strobeFreq = freq;
                strobePower = powerMouse;
                strobePowerAdjusted = adjustedPowerMouse;
                strobeFreqBand = freqBand;
            \}
        \}
    \}
    
    void printFreqPowerInfo(int leftX, int bottomY, int freqBand, int freq, double power, int adjustedPower) \{
        noStroke();
        fill(0, 60);
        rect(leftX + 2, bottomY - 2, leftX + 170, bottomY - 56);
        fill(0, 255, 0);
        text(String.format(\"Band:  %d\", freqBand), leftX + 5, bottomY - 44);
        text(String.format(\"Frequency:  ~%dHz\", freq), leftX + 5, bottomY - 31);
        text(String.format(\"Adjusted power:  %.0f\", power), leftX + 5, bottomY - 18);
        text(String.format(\"Raw power:  %dcans\", adjustedPower), leftX + 5, bottomY - 5);
    \}
"
    .fft-in "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
bGDEOwBy/zsuOvU7GO5xO459JQ=="
    .smoothing 0.5
    .strobe-freq 4299
    .strobe-power 233630.59209640152
    .strobe-power-adjusted 509
    .strobe-freq-band 201
  }
  @ ./voronoi-p2d video:gl:p2d {
    #%graph.x 1222
    #%graph.y 77
    .code "import org.kynosarges.tektosyne.geometry.*;
import java.util.concurrent.CopyOnWriteArrayList;


    static final int MAX_CELLS_COUNT = 7;
    static final double EDGE_THRESHOLD = 0.1;
    static final String ALL = \"All\";
    static final String ONE_BY_ONE = \"One by one\";
    static final String RANDOMLY = \"Random\";
    
    @In(0) PImage in0;
    @In(1) PImage in1;
    @In(2) PImage in2;
    @In(3) PImage in3;
    @In(4) PImage inEdges;
    
    @OffScreen(persistent = false) PGraphics2D out0, out1, out2, out3, outEdges;
    
    @P(0) @Type.String(allowed = \{ALL, ONE_BY_ONE, RANDOMLY\}, def = RANDOMLY) String movements;
    @P(1) @Type.Number(def = 80, min = 0, max = 1000, skew=2) double movementSpeed;
    @P(2) @Type.Number(def = 1, min = 0, max = 15, skew=1.5) double timeToMove;
    
    @P(3) @Type.Integer(def = 6, min = 2, max = MAX_CELLS_COUNT) @OnChange(\"updateCellsCount\") int cellsCount;
    
    @P(4) @Type.Number(def = 3, min = 0, max = 1000, skew=4) @OnChange(\"updateClipRect\") double edgeWidth;
    
    @P(10) @Type.Integer(def = 0, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell0InputNo;
    @P(11) @Type.Integer(def = 1, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell1InputNo;
    @P(12) @Type.Integer(def = 2, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell2InputNo;
    @P(13) @Type.Integer(def = 3, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell3InputNo;
    @P(14) @Type.Integer(def = 0, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell4InputNo;
    @P(15) @Type.Integer(def = 1, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell5InputNo;
    @P(16) @Type.Integer(def = 2, min = -1, max = 3) @OnChange(\"updateCellsInput\") int cell6InputNo;

    @P(17) @Type.Boolean(def = false) boolean drawCenters;
    
    @P(18) @Type.Boolean(def = true) boolean justColours;
    
    @Inject Ref<List<PVector>> coloursRef;
    
    List<Cell> cells = new ArrayList<>();
    
    // Last moved cell number
    int lastMoved = -1;
    
    // Current state of cells geometry
    VoronoiResults results;
    
    // Current coordinates of cells centers
    @Inject Ref<List<PointD>> pointsRef;
    
    // Target coordinates of cells
    @Inject Property m0x, m1x, m2x, m3x, m4x, m5x, m6x;
    @Inject Property m0y, m1y, m2y, m3y, m4y, m5y, m6y;

    
    
    // Initialisation

    @Override public void setup() \{
        initRefs();
        updateCellsInputs();
        updateCellsCount();

        smooth();
        background(0);
    \}
    
    void initRefs() \{ 
        coloursRef.init(ArrayList::new);
        coloursRef.apply(list -> \{
            while(list.size() < MAX_CELLS_COUNT) \{
                list.add(new PVector(random(255), random(255), random(255)));
//                list.add(new PVector(255, 255, 255));
            \}
        \});
        pointsRef.init(CopyOnWriteArrayList::new);
    \}
    
    void updateCellsInputs() \{
        int\[\] cellInputNos = new int\[\] \{ cell0InputNo, cell1InputNo, cell2InputNo, cell3InputNo, cell4InputNo, cell5InputNo, cell6InputNo \};
        PGraphics2D\[\] outs = \{ null, out0, out1, out2, out3 \};
        PImage\[\] ins = \{ null, in0, in1, in2, in3 \};
        Property\[\]\[\] moves = \{ \{m0x, m0y\}, \{m1x, m1y\}, \{m2x, m2y\},
            \{m3x, m3y\}, \{m4x, m4y\}, \{m5x, m5y\}, \{m6x, m6y\} \};

        List<Cell> newCells = new ArrayList<>();
        for(int i=0; i<MAX_CELLS_COUNT; ++i) \{
            int inputNo = cellInputNos\[i\];
            newCells.add(new Cell(
                    newCells.size(),
                    Optional.ofNullable(ins\[inputNo + 1\]), 
                    Optional.ofNullable(outs\[inputNo + 1\]), 
                    coloursRef.get().get(i),
                    moves\[i\]\[0\],
                    moves\[i\]\[1\]));
        \}
        cells = newCells;
    \}
    
    void updateCellsCount() \{
        pointsRef.apply(points -> \{
            int oldSize = points.size();
            if (oldSize != cellsCount) \{
                RectD clipRect = new RectD(0 - edgeWidth/2, 0 - edgeWidth/2, width + edgeWidth/2, height + edgeWidth/2);
                if (oldSize < cellsCount) \{
                    PointD\[\] newPoints = GeoUtils.randomPoints(cellsCount - oldSize, clipRect, new PointDComparatorY(0), 10);
                    points.addAll(Arrays.asList(newPoints));
                \} else \{
                    points.subList(cellsCount, oldSize).clear();
                \}
                results = Voronoi.findAll(points.toArray(new PointD\[0\]), clipRect);        

                // set coordinates of new cells if added
                for(int i = oldSize; i < points.size(); ++i) \{
                    PointD point = points.get(i);
                    cells.get(i).jumpTo(point.x, point.y);
                \}
            \}
        \});
    \}

    
    
    // Drawing
    
    @Override public void draw() \{
        updateCellsGeometry();
        cells.subList(0, cellsCount).forEach(this::drawCell);
        drawCenters(outEdges);
        drawEdges(inEdges, outEdges);
    \}
    
    void updateCellsGeometry() \{
        boolean moved = false;
        for(int i=0; i<cellsCount; ++i) \{
            PointD oldPoint = pointsRef.get().get(i);
            PointD newPoint = new PointD(d(cells.get(i).moveX), d(cells.get(i).moveY));
            boolean pointMoved = abs(oldPoint.x - newPoint.x) > 1 || abs(oldPoint.y - newPoint.y) > 1;
            if(pointMoved) \{
                pointsRef.get().set(i, newPoint);
                moved = true;
            \}
        \}
        if(moved || results == null) \{
            RectD clipRect = new RectD(0 - edgeWidth/2, 0 - edgeWidth/2, width + edgeWidth/2, height + edgeWidth/2);
            results = Voronoi.findAll(pointsRef.get().toArray(new PointD\[0\]), clipRect);
        \}
    \}
    
    void drawCell(Cell cell) \{
        cell.out.ifPresent(out -> cell.in.ifPresent( in -> \{
            out.beginDraw();
            out.clear();
            out.blendMode(BLEND);
             // if no edges, expanding mask by one pixel to avoid artifacts
            out.strokeWeight(edgeWidth > EDGE_THRESHOLD ? edgeWidth : 1);

            PointD\[\] region = results.voronoiRegions()\[cell.no\];
            double\[\] coords = PointD.toDoubles(region);
            PVector c = cell.colour;
            if (justColours) \{
                out.fill(c.x, c.y, c.z);
                out.stroke(c.x, c.y, c.z);
            \} else \{
                out.fill(255);
                out.stroke(0);
            \}

            out.beginShape();
            for(int i=0; i<coords.length/2; i+=1) \{
                out.vertex(coords\[i*2\], coords\[i*2+1\]);
            \}
            out.endShape(CLOSE);
            
            if (!justColours) \{
                out.blendMode(MULTIPLY);
                out.image(in, 0, 0);
            \}
            out.endDraw();
            blendMode(ADD);
            image(out, 0, 0);
        \}));
    \}
    
    void drawCenters(PGraphics2D out) \{
        if(drawCenters) \{
            out.beginDraw();
            out.blendMode(BLEND);
            out.fill(255);
            out.noStroke();
            
            double dotSize = 20;
            for (PointD point: pointsRef.get()) \{
                out.rect(point.x-dotSize/2, point.y-dotSize/2, dotSize, dotSize);
            \}

            out.endDraw();
            blendMode(ADD);
            image(out, 0, 0);
        \}
    \}
    
    void drawEdges(PImage in, PGraphics2D out) \{
        if(edgeWidth > EDGE_THRESHOLD) \{
            out.beginDraw();
            out.blendMode(BLEND);
            out.strokeWeight(edgeWidth);
            out.stroke(255);
            
            for (VoronoiEdge edge: results.voronoiEdges) \{
                final PointD start = results.voronoiVertices\[edge.vertex1\];
                final PointD end = results.voronoiVertices\[edge.vertex2\];

                out.line(start.x, start.y, end.x, end.y);
            \}
            
            if (!justColours) \{
                out.blendMode(MULTIPLY);
                out.image(in, 0, 0);
            \}
            out.endDraw();
            blendMode(ADD);
            image(out, 0, 0);
        \}
    \}

    

    // Cell movement
    
    @T(1) public void moveCells() \{
        if (movements.equals(ALL)) \{
            cells.forEach(this::moveCell);
        \} else if (movements.equals(ONE_BY_ONE)) \{
            if(lastMoved < 0 || lastMoved >= cellsCount) \{
                lastMoved = 0;
            \}
            moveCell(cells.get(lastMoved++));
        \} else if (movements.equals(RANDOMLY)) \{
            cells.stream()
                    .filter(c -> random(1) > 0.5)
                    .forEach(this::moveCell);
        \}
    \}
    
    void moveCell(Cell cell) \{
        double nx, ny;
        double deltaMove = movementSpeed;

        // ensure new coordinate is inside viewport
        do \{
            double alpha = random(PI*2);
            nx = cell.x() + cos(alpha) * deltaMove;
            ny = cell.y() + sin(alpha) * deltaMove;
            deltaMove *= 0.7; // slow down to avoid infinite loop
        \} while (nx < 0 || nx > width || ny < 0 || ny > height);

        cell.startMovingTo(nx, ny, timeToMove);
    \}

    
    
    
    // Cell container

    static class Cell \{
        final int no;
        final Optional<PImage> in;
        final Optional<PGraphics2D> out;
        final PVector colour;
        final Property moveX;
        final Property moveY;
        
        Cell(int no, Optional<PImage> in, Optional<PGraphics2D> out, PVector colour, 
                Property moveX, Property moveY) \{
            this.no = no;
            this.in = in;
            this.out = out;
            this.colour = colour;
            this.moveX = moveX;
            this.moveY = moveY;
        \}
        
        double x() \{
            return moveX.getDouble();
        \}
        
        double y() \{
            return moveY.getDouble();
        \}
        
        void startMovingTo(double x, double y, double timeToMove) \{
            moveX.to(x).in(timeToMove).easing(Easing.cubicOut);
            moveY.to(y).in(timeToMove).easing(Easing.cubicOut);
        \}
        
        void jumpTo(double x, double y) \{
            moveX.set(x);
            moveY.set(y);
        \}
    \}
"
    .movements All
    .movement-speed 140
    .time-to-move 0.4
    .cells-count 7
    .edge-width 17.8642124095088
    .just-colours false
  }
  @ ./taptempo core:custom {
    #%graph.x 75
    #%graph.y 468
    #%graph.colors Orange
    .code "

    @P(1) @Type.Number(min = 0.001, max = 60, def = 1)
    double period;

    @P(2) @Type.Number @ReadOnly
    Property time;

    @P(3) @Type.Boolean() boolean playing = true;

    @Out(1) Output trig;
    @Out(2) Output unit;

    @Inject Property chrono;

    final int ARRAY_SIZE = 5;
    double\[\] timeArray = new double\[ARRAY_SIZE\];

    @Override
    public void update() \{
        if (!time.isAnimating() && playing) \{
            time.set(0).to(1).in(period);
            trig.send(1.0);
        \}
        unit.send(d(time));
    \}

    @T(0) void tap()\{
        if(d(chrono) < 12)\{
            for(int i = ARRAY_SIZE-1; i > 0; i--)\{
                timeArray\[i\] = timeArray\[i-1\];
            \}
            timeArray\[0\] = d(chrono);
            double _sum = 0;
            for(int i = 0; i < ARRAY_SIZE; i++)\{
                _sum += timeArray\[i\];
            \}
            period = (_sum/ARRAY_SIZE);
            time.animator().in(period);
        \}
        chrono.set(0).to(1000).in(1000);
    \}
    
    @T(1) void trigger()\{
        time.set(0).to(1).in(period);
        trig.send(1.0);
    \}
"
    .period 0.0033089666
    .playing true
  }
  @ ./colour1 video:gl:p2d {
    #%graph.x 348
    #%graph.y -52
    .code "import java.awt.Color;


    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .red 201.0
    .green 89.11290322580646
    .blue 32.90322580645161
    .hue 0.05621302127838135
    .saturation 0.8407959938049316
    .brightness 0.7882353067398071
    .fragment "uniform vec3 colour;

void main() \{
    gl_FragColor = vec4( colour.x/255, colour.y/255, colour.z/255, 1.0 );
\}"
  }
  @ ./colour2 video:gl:p2d {
    #%graph.x 429
    #%graph.y 4
    .code "import java.awt.Color;


    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .red 201.0
    .green 145.0
    .blue 222.09677419354838
    .hue 0.7878787517547607
    .saturation 0.3468468487262726
    .brightness 0.8705882430076599
    .fragment "uniform vec3 colour;

void main() \{
    gl_FragColor = vec4( colour.x/255, colour.y/255, colour.z/255, 1.0 );
\}"
  }
  @ ./strobe video:gl:p2d {
    #%graph.x 601
    #%graph.y 137
    .code "import java.awt.Color;

    @P(0) @Type.Number(min = 0, max = 1) double ease;
    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    
    @Inject Property strobeBrightness;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"brightness\", d(strobeBrightness));
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}
    
    @T(0) void strobe() \{
        strobeBrightness.set(1);
        strobeBrightness.to(0).in(ease).easing(Easing.cubicIn);
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .ease 0.4
    .red 255.0
    .green 77.0
    .blue 200.0
    .hue 0.8846153846153846
    .saturation 0.6980392336845398
    .brightness 1.0
    .fragment "uniform vec3 colour;
uniform float brightness;

void main() \{
    gl_FragColor = vec4(
        colour.x/255*brightness,
        colour.y/255*brightness, 
        colour.z/255*brightness, 
        1.0
    );
\}"
  }
  @ ./strobe1 video:gl:p2d {
    #%graph.x 823
    #%graph.y 377
    .code "import java.awt.Color;

    @P(0) @Type.Number(min = 0, max = 1) double ease;
    @P(1) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double red;
    @P(2) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double green;
    @P(3) @Type.Number(min = 0, max = 255) @OnChange(\"onRGB\") double blue;
    @P(4) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double hue;
    @P(5) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double saturation;
    @P(6) @Type.Number(min = 0, max = 1) @OnChange(\"onHSV\") double brightness;
    
    @Out(1) Output rgb;

    @P(10)
    @Type.String(mime = GLSL_FRAGMENT_MIME)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    
    @Inject Property strobeBrightness;

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER, fragment);
        \}
        shader(shader);
        shader.set(\"brightness\", d(strobeBrightness));
        shader.set(\"colour\", red, green, blue);
        rect(0, 0, width, height);
        resetShader();
    \}
    
    @T(0) void strobe() \{
        strobeBrightness.set(1);
        strobeBrightness.to(0).in(ease).easing(Easing.cubicIn);
    \}

    void updateShader() \{
        shader = null;
    \}

    void onRGB() \{
        float\[\] hsb = new float\[3\];
        hsb = Color.RGBtoHSB((int)red, (int)green, (int)blue, hsb);
        hue = hsb\[0\];
        saturation = hsb\[1\];
        brightness = hsb\[2\];
        sendRGB();
    \}

    void onHSV() \{
        Color rgb = Color.getHSBColor((float)hue, (float)saturation, (float)brightness);
        red = rgb.getRed();
        green = rgb.getGreen();
        blue = rgb.getBlue();
        sendRGB();
    \}
    
    void sendRGB() \{
        // https://stackoverflow.com/a/17946089
        int rgbaInt = (round(red) << 24)
                + (round(green) << 16)
                + (round(blue) << 8);
        rgb.send(rgbaInt);
    \}
"
    .ease .2
    .red 98.0
    .green 255.0
    .blue 70.0
    .hue 0.3076923076923077
    .saturation 0.7254902124404907
    .brightness 1.0
    .fragment "uniform vec3 colour;
uniform float brightness;

void main() \{
    gl_FragColor = vec4(
        colour.x/255*brightness,
        colour.y/255*brightness, 
        colour.z/255*brightness, 
        1.0
    );
\}"
  }
  @ ./osc-receive core:custom {
    #%graph.x 111
    #%graph.y 327
    .code "import de.sciss.net.*;
import java.io.IOException;
import java.util.concurrent.ConcurrentLinkedQueue;


    @P(1) @Type.Integer(def = 3333) @Config.Port(false) @OnChange(\"resetServer\")
    int port;
    
    @Out(1) Output out;

    @Inject Ref<OSCServer> osc;
    @Inject Ref<Queue<OSCMessage>> queue;

    @Override 
    public void init() \{
        queue.init(ConcurrentLinkedQueue::new);
        initServer();
    \}

    @Override
    public void update() \{
        queue.ifPresent(q -> \{
            OSCMessage msg;
            while ((msg = q.poll()) != null) \{
                Value\[\] vals = new Value\[msg.getArgCount() + 1\];
                vals\[0\] = PString.valueOf(msg.getName());
                for (int i = 0; i < msg.getArgCount(); i++) \{
                    Object arg = msg.getArg(i);
                    if (arg instanceof Number) \{
                        vals\[i + 1\] = PNumber.valueOf(((Number) arg).doubleValue());
                    \} else \{
                        vals\[i + 1\] = PString.valueOf(arg.toString());
                    \}
                \}
                out.send(PArray.valueOf(vals));
            \}
        \});

    \}
    
    void initServer() \{
        osc.init(() -> \{
            try \{
                OSCServer s = OSCServer.newUsing(OSCServer.UDP, port);
                s.start();
                return s;
            \} catch (IOException ex) \{
                log(ERROR, ex);
                return null;
            \}
        \})
        .bind(OSCServer::addOSCListener, OSCServer::removeOSCListener,
                (msg, sa, l) -> queue.apply(q -> q.add(msg)))
        .onDispose(s -> s.dispose());
    \}
    
    void resetServer() \{
        osc.clear();
        initServer();
    \}


"
  }
  @ ./osc-filter core:custom {
    #%graph.x 305
    #%graph.y 452
    .code "

    @Out(0) Output edges;
    @Out(1) Output move;
    @Out(2) Output cell;
    

    @In(1) void in(PArray in) \{
//        StringBuilder sb = new StringBuilder(\"\[ \");
//        sb.append(in.stream().map(v -> v.toString()).collect(Collectors.joining(\", \")));
//        sb.append(\" \]\");
//        log(ERROR, sb.toString());
        
        Map<String, String> oscMap = new HashMap<>();
        for(int i=0; i<in.getSize()/1; i+=2) \{
            oscMap.put(in.get(i).toString(), in.get(i+1).toString());
        \}
        log(ERROR, oscMap.toString());
        
        matchAndSend(oscMap);
    \}

    void matchAndSend(Map<String, String> oscMap) \{
        // skip silence
        if (\"0.0\".equals(oscMap.get(\"gain\"))) \{
            return;
        \}
        
        Map<String, String> cellMap = new HashMap<>();
        cellMap.put(\"s\", \"nockicks\");
        
        Map<String, String> moveMap = new HashMap<>();
        moveMap.put(\"s\", \"tlvocals\");
//        moveMap.put(\"n\", \"8.0\");
        
        Map<String, String> edgesMap = new HashMap<>();
        edgesMap.put(\"s\", \"mdbrims\");
        
        if(oscMap.entrySet().containsAll(cellMap.entrySet())) \{
            cell.send();
        \} else if(oscMap.entrySet().containsAll(moveMap.entrySet())) \{
            move.send();
        \} else if(oscMap.entrySet().containsAll(edgesMap.entrySet())) \{
            edges.send();
        \}
    \}
"
  }
  ~ ./colour1!out ./voronoi-p2d!in-0
  ~ ./colour2!out ./voronoi-p2d!in-1
  ~ ./strobe!out ./voronoi-p2d!in-edges
  ~ ./strobe1!out ./voronoi-p2d!in-3
  ~ ./osc-receive!out ./osc-filter!in
  ~ ./colour2!out ./voronoi-p2d!in-2
  ~ ./osc-filter!move ./voronoi-p2d!move-cells
  ~ ./osc-filter!edges ./strobe!strobe
  ~ ./osc-filter!cell ./strobe1!strobe
  ~ ./levels!out ./screen!in
}
