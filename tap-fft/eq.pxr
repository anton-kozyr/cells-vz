@ /eq root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 960
  .height 400
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 209
    #%graph.y -39
    .always-on-top true
  }
  @ ./eq video:gl:p2d {
    #%graph.x 74
    #%graph.y -39
    .code "import processing.core.PApplet;


    @P(1) @OnChange(\"processFFT\") float\[\] fftIn;
    @P(2) @Type.Number(def=0.2, min=0, max=1) double smoothing;
    
    @P(5) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil0;
    @P(6) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil1;
    @P(7) @Type.Number(def=0.4, min=0.0, max=2, skew=2) Property recoil2;
    
    float\[\] fft;
    int maxFFT;
    final int MAX_FREQ = 10910;
    double barWidth;
    
    private final static int PINGS_COUNT = 3;
    @P(13) @ReadOnly int\[\] pingBands; // Frequency bands
    @P(10) @ReadOnly int\[\] pingFreqs;   // Frequencies
    @P(11) @ReadOnly double\[\] pingPowers;      // Input, raw power
    @P(12) @ReadOnly int\[\] pingAdjusts; // Adjusted power
    
    @Out(0) Output ping0;
    @Out(1) Output ping1;
    @Out(2) Output ping2;
    
    @Inject Property led0;
    @Inject Property led1;
    @Inject Property led2;
    
    // TODO: ping coverage (grab 1, 2 or three bands)
    
    Output\[\] pings;
    Property\[\] leds;
    Property\[\] recoils;
    
    
    @Override
    public void setup() \{
//        if(null==pingBands || pingBands.length < 4) \{
//            reset();
//        \}
        pings = new Output\[\] \{ ping0, ping1, ping2 \};
        leds = new Property\[\] \{ led0, led1, led2 \};
        recoils = new Property\[\] \{ recoil0, recoil1, recoil2 \};
        rectMode(CORNERS);
        ellipseMode(CENTER);
        strokeWeight(1);
    \}
    
    @T(0) void reset() \{
        pingBands = new int\[PINGS_COUNT\];
        pingFreqs = new int\[PINGS_COUNT\];
        pingPowers = new double\[PINGS_COUNT\];
        pingAdjusts = new int\[PINGS_COUNT\];
        Arrays.fill(pingBands, Integer.MAX_VALUE);
        Arrays.fill(pingFreqs, Integer.MAX_VALUE);
        Arrays.fill(pingPowers, Double.MAX_VALUE);
        Arrays.fill(pingAdjusts, Integer.MAX_VALUE);
    \}

    void processFFT() \{
        if(null == fft) \{
            fft = fftIn;
        \}
        maxFFT = fftIn.length/2;
        float\[\] newFFT = new float\[maxFFT\];
        float s = (float) smoothing;
        try \{
            for (int i=0; i<maxFFT; ++i) \{
                newFFT\[i\] = fft\[i\]*s + fftIn\[i\]*(1-s);
            \}
        \} catch (ArrayIndexOutOfBoundsException e) \{
            log(WARNING, \"Something weird in processFFT()  - try reset button\");
        \} finally \{
            fft = newFFT;
        \}
    \}
    

    @Override
    public void draw() \{
        if(null == fft || fft.length == 0 || 0 == maxFFT) \{
            log(WARNING, \"No signal yet received - ignore if doesn't repeat\");
            return;
        \}
        fill(255);
        stroke(255);
        boolean mouseHit = false;
        int eqWidth = width;
        barWidth = (eqWidth)/(maxFFT);
        for(int i = 0; i<maxFFT; ++i) \{
            float amp = fft\[i\];
            double displayAmp = adjustPower(amp);
            double left = barWidth*i;
            double right = barWidth*i + barWidth;
            rect(left+1, height, right-1, height-displayAmp);
            if(left <= mouseX && right >= mouseX && displayAmp > height - mouseY) \{
                mouseHit = true;
            \}
            checkPings(amp, i);  // should go to processFFT
        \}
        
        drawPings();
        
        fill(255);
        text(String.format(\"FFT Bands: %d\", maxFFT), width - 130, height - 20);
        
        stroke(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        fill(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        if (pmouseX < eqWidth) \{
            line(pmouseX, 0, pmouseX, height);
            line(0, pmouseY, eqWidth, pmouseY);
            int freqBand = (int) (pmouseX / barWidth);
            int freq = (int) (MAX_FREQ * (double)pmouseX / eqWidth);
            int adjustedPowerMouse = height-pmouseY;
            double powerMouse = deAdjustPower(adjustedPowerMouse);
            
            printFreqPowerInfo(pmouseX, pmouseY, 
                    freqBand, freq, powerMouse, adjustedPowerMouse, null);
            
            // update pingsw
            if(keyPressed) \{
                int pingNo = -1;
                if (key == 'q' || key == 'Q') \{
                    pingNo = 0;
                \} else if (key == 'w' || key == 'W') \{
                    pingNo = 1;
                \} else if (key == 'e' || key == 'E') \{
                    pingNo = 2;
                \} 
                    
                if(pingNo > -1) \{
                    text(String.format(\"Ping-%d\",pingNo), pmouseX-50, pmouseY-5);
                    if (mousePressed) \{
                        pingBands\[pingNo\] = freqBand;
                        pingFreqs\[pingNo\] = freq;
                        pingPowers\[pingNo\] = powerMouse;
                        pingAdjusts\[pingNo\] = adjustedPowerMouse;
                    \}
                \}
            \}
        \}
        
        noFill();
        stroke(0, 30, 0);
        rect(0, 0, width-1, height-1);
    \}
    
    void checkPings(double power, int band) \{
        try \{
            for (int i=0; i<PINGS_COUNT; ++i) \{
                if(power >= pingPowers\[i\] && band == pingBands\[i\] && !leds\[i\].isAnimating()) \{
                    leds\[i\].set(255).to(0).in(d(recoils\[i\])).easing(Easing.cubicIn);
                    pings\[i\].send();
                \}
            \}
        \} catch(ArrayIndexOutOfBoundsException e) \{
            log(WARNING, \"Something weird in checkPings()  - try reset button\");
        \}
    \}
    
    void drawPings() \{
        noStroke();
        for(int i=0; i<PINGS_COUNT; ++i) \{
            String label;
            String colorName;
            if(i==0) \{
                fill(255, 0 , 0, 100);
                label = \"Q\";
                colorName = \"Red\";
            \} else if(i==1) \{
                fill(255, 255 , 0, 100);
                label = \"W\";
                colorName = \"Yellow\";
            \} else \{
                fill(0, 255, 255, 100);
                label = \"E\";
                colorName = \"Cyan\";
            \}
            if(leds\[i\].isAnimating()) \{
                ellipse(pingBands\[i\] * barWidth, height-pingAdjusts\[i\], 100, 100);
                text(String.format(\"=%s=\", label), 
                        pingBands\[i\] * barWidth - 15, 
                        height-pingAdjusts\[i\]-i(leds\[i\]));
            \} else \{
                if(i==0) \{
                    fill(255, 0 , 0);
                \} else if(i==1) \{
                    fill(255, 255 , 0);
                \} else \{
                    fill(0, 255, 255);
                \}
                ellipse(pingBands\[i\] * barWidth, height-pingAdjusts\[i\], 7, 7);
            \}
            printFreqPowerInfo(20 + i*200, height - 320, 
                    pingBands\[i\], pingFreqs\[i\], pingPowers\[i\], pingAdjusts\[i\], 
                    String.format(\"%d %s %s\", i, label, colorName));
        \}
    \}
    
    void printFreqPowerInfo(int leftX, int bottomY, int freqBand, int freq, double power, int adjustedPower, String label) \{
        noStroke();
        if(label != null) \{
            text(label, leftX + 5, bottomY - 57);
        \}
        if(freqBand < Integer.MAX_VALUE) \{
            text(String.format(\"Band:  %d\", freqBand), leftX + 5, bottomY - 44);
            text(String.format(\"Frequency:  ~%dHz\", freq), leftX + 5, bottomY - 31);
            text(String.format(\"Adjusted power:  %.0f\", power), leftX + 5, bottomY - 18);
            text(String.format(\"Raw power:  %dcans\", adjustedPower), leftX + 5, bottomY - 5);
        \}
    \}
    
    double adjustPower(double power) \{
        return (30.0 * log(power * 100.0));
    \}
    
    double deAdjustPower(double adjustedPower) \{
        return exp(adjustedPower/30.0)/100;
    \}
    
"
    .fft-in "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
xCmPN+thyTgMJ0o34VCxN//pvzgNZw4="
    .smoothing 0.5
    .recoil-0 0.7648891966759004
  }
  @ ./ping-0 core:routing:send {
    #%graph.x 376
    #%graph.y 11
    .address /eq-target/eq-beats.in-0
  }
  @ ./ping-1 core:routing:send {
    #%graph.x 376
    #%graph.y 73
    .address /eq-target/eq-beats.in-1
  }
  @ ./ping-2 core:routing:send {
    #%graph.x 376
    #%graph.y 133
    .address /eq-target/eq-beats.in-2
  }
  ~ ./eq!out ./screen!in
  ~ ./eq!ping-0 ./ping-0!in
  ~ ./eq!ping-1 ./ping-1!in
  ~ ./eq!ping-2 ./ping-2!in
}
