@ /eq root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 960
  .height 500
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 209
    #%graph.y -39
    .always-on-top true
    .show-cursor true
  }
  @ ./eq video:gl:p2d {
    #%graph.x 68
    #%graph.y -39
    .code "import processing.core.PApplet;


    @P(1) @OnChange(\"processFFT\") float\[\] fftIn;
    @P(2) @Type.Number(def=0.2, min=0, max=1) double smoothing;
    
    @P(5) @Type.Number(def=0.4, min=0.0, max=2, skew=2) double recoil0;
    @P(6) @Type.Number(def=0.4, min=0.0, max=2, skew=2) double recoil1;
    @P(7) @Type.Number(def=0.4, min=0.0, max=2, skew=2) double recoil2;
    
    float\[\] fft;
    int maxFFT;
    final int MAX_FREQ = 10910;
    
    private final static int PINGS_COUNT = 3;
    @P(13) @ReadOnly int\[\] pingBands; // Frequency bands
    @P(10) @ReadOnly int\[\] pingFreqs;   // Frequencies
    @P(11) @ReadOnly double\[\] pingPowers;      // Input, raw power
    @P(12) @ReadOnly int\[\] pingAdjusts; // Adjusted power
    
    @Out(0) Output ping0;
    @Out(1) Output ping1;
    @Out(2) Output ping2;
    
    @Inject Property led0;
    @Inject Property led1;
    @Inject Property led2;
    
    Output\[\] pings;
    Property\[\] leds;
    
    
    @Override
    public void setup() \{
        if(null==pingBands || pingBands.length < 4) \{
            reset();
        \}
        pings = new Output\[\] \{ ping0, ping1, ping2 \};
        leds = new Property\[\] \{ led0, led1, led2 \};
        rectMode(CORNERS);
        ellipseMode(CENTER);
    \}
    
    @T(0) void reset() \{
        pingBands = new int\[PINGS_COUNT\];
        pingFreqs = new int\[PINGS_COUNT\];
        pingPowers = new double\[PINGS_COUNT\];
        pingAdjusts = new int\[PINGS_COUNT\];
        Arrays.fill(pingBands, Integer.MAX_VALUE);
        Arrays.fill(pingFreqs, Integer.MAX_VALUE);
        Arrays.fill(pingPowers, Double.MAX_VALUE);
        Arrays.fill(pingAdjusts, Integer.MAX_VALUE);
    \}

    void processFFT() \{
        if(null == fft) \{
            fft = fftIn;
        \}
        maxFFT = fftIn.length/2;
        float\[\] newFFT = new float\[maxFFT\];
        float s = (float) smoothing;
        try \{
            for (int i=0; i<maxFFT; ++i) \{
                newFFT\[i\] = fft\[i\]*s + fftIn\[i\]*(1-s);
            \}
        \} catch (ArrayIndexOutOfBoundsException e) \{
            
        \} finally \{
            fft = newFFT;
        \}
    \}
    

    @Override
    public void draw() \{
        if(null == fft || fft.length == 0 || 0 == maxFFT) \{
            log(WARNING, \"No signal\");
            return;
        \}
        strokeWeight(1);
        fill(255);
        stroke(255);
        boolean mouseHit = false;
        int eqWidth = width - 400;
        double bar = (width - 100)/(maxFFT);
        for(int i = 0; i<maxFFT; ++i) \{
            float amp = fft\[i\];
            double displayAmp = adjustPower(amp);
            double left = bar*i;
            double right = bar*i+bar;
            rect(left+1, height, right-1, height-displayAmp);
            if(left <= mouseX && right >= mouseX && displayAmp > height - mouseY) \{
                mouseHit = true;
            \}
            if(amp >= pingPowers\[0\] && i == pingBands\[0\] && !leds\[0\].isAnimating()) \{
                leds\[0\].set(255).to(0).in(recoil0).easing(Easing.cubicIn);
                pings\[0\].send();
            \}
        \}
        if(leds\[0\].isAnimating()) \{
            noStroke();
            fill(255, 0 , 0, i(leds\[0\]));
            ellipse(pingBands\[0\] * bar, height-pingAdjusts\[0\], 100, 100);
            text(String.format(\"=%d=\", 0), pingBands\[0\] * bar - 15, height-pingAdjusts\[0\]-i(leds\[0\]));
        \} else \{
            noFill();
            stroke(255, 0, 0);
            ellipse(pingBands\[0\] * bar, height-pingAdjusts\[0\], 10, 10);
        \}
        fill(255);
        printFreqPowerInfo(width - 300, height - 300, pingBands\[0\], pingFreqs\[0\], pingPowers\[0\], pingAdjusts\[0\]);
        
        
        text(String.format(\"FFT Bands: %d\", maxFFT), width - 100, height - 20);
        text(\"Q RED 0\\nA GREEN 1\\nZ BLUE 2\", width - 100, height - 120);
        
        strokeWeight(0.5);
        stroke(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        fill(mouseHit ? 255 : 0, mouseHit ? 0 : 255, 0);
        if (pmouseX < eqWidth) \{
            line(pmouseX, 0, pmouseX, height);
            line(0, pmouseY, eqWidth, pmouseY);
            int freqBand = (int) (pmouseX / bar);
            int freq = (int) (MAX_FREQ * (double)pmouseX / eqWidth);
            int adjustedPowerMouse = height-pmouseY;
            double powerMouse = deAdjustPower(adjustedPowerMouse);
            
            printFreqPowerInfo(pmouseX, pmouseY, freqBand, freq, powerMouse, adjustedPowerMouse);
            if(keyPressed && (key == 'q' || key == 'Q')) \{
                text(String.format(\"Ping-%d\", 0), pmouseX-50, pmouseY-5);
                if (mousePressed) \{
                    pingBands\[0\] = freqBand;
                    pingFreqs\[0\] = freq;
                    pingPowers\[0\] = powerMouse;
                    pingAdjusts\[0\] = adjustedPowerMouse;
                \}
            \}
        \}
    \}
    
    void printFreqPowerInfo(int leftX, int bottomY, int freqBand, int freq, double power, int adjustedPower) \{
        noStroke();
        text(String.format(\"Band:  %d\", freqBand), leftX + 5, bottomY - 44);
        text(String.format(\"Frequency:  ~%dHz\", freq), leftX + 5, bottomY - 31);
        text(String.format(\"Adjusted power:  %.0f\", power), leftX + 5, bottomY - 18);
        text(String.format(\"Raw power:  %dcans\", adjustedPower), leftX + 5, bottomY - 5);
    \}
    
    double adjustPower(double power) \{
        return (30.0 * log(power * 100.0));
    \}
    
    double deAdjustPower(double adjustedPower) \{
        return exp(adjustedPower/30.0)/100;
    \}
    
"
    .fft-in "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
zxD8OhT69Tqmyc47KIqpOqRr9zgHeUA="
    .smoothing 0.5
    .recoil-0 0.7648891966759004
  }
  @ ./ping-0 core:routing:send {
    #%graph.x 209
    #%graph.y 36
    .address /eq-target/eq-beats.in-0
  }
  @ ./ping-1 core:routing:send {
    #%graph.x 209
    #%graph.y 86
    .address /eq-target/eq-beats.in-1
  }
  @ ./ping-2 core:routing:send {
    #%graph.x 209
    #%graph.y 136
    .address /eq-target/eq-beats.in-2
  }
  ~ ./eq!out ./screen!in
  ~ ./eq!ping-0 ./ping-0!in
}
