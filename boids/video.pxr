@ /video root:video {
  #%autostart true
  #%praxis.version 4.1.1
  .renderer OpenGL
  .width 800
  .height 600
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 600
    #%graph.y 200
    .always-on-top true
    .show-cursor true
  }
  @ ./boids video:gl:p2d {
    #%graph.x 351
    #%graph.y 200
    .code "

    @Inject Property maxforce;
    @Inject Property maxspeed;
    @Inject Property desiredseparation;
    
    @P(1) @Type.Number(def=0.5, min=0, max=2) double easing; 
    
    @P(2) @Type.Boolean @ReadOnly boolean together = false;
    
    @T(1) void scare() \{
        if (!together) \{
            desiredseparation.set(500);
            maxspeed.set(8);
            maxforce.set(0.5);

            desiredseparation.to(5.0).in(easing).easeIn();
            maxspeed.to(2).in(easing).easeOut();
            maxforce.to(0.03).in(easing).easeIn();
        \} else \{
            desiredseparation.set(25.0);
            maxspeed.set(2);
            maxforce.set(0.03);
        \}
    \}
    
    @T(2) void toggleTogetherness() \{
        together = !together;
    \}
    
Flock flock;

    @Override
    public void setup() \{
        desiredseparation.set(25.0);
        maxspeed.set(2);
        maxforce.set(0.03);
        
          flock = new Flock();
  // Add an initial set of boids into the system
  for (int i = 0; i < 300; i++) \{
    flock.addBoid(new Boid(width/4,height/4));
  \}
    \}

    @Override
    public void draw() \{
          background(50);
  flock.run();
    \}
    

// The Flock (a list of Boid objects)

class Flock \{
  ArrayList<Boid> boids; // An ArrayList for all the boids

  Flock() \{
    boids = new ArrayList<Boid>(); // Initialize the ArrayList
  \}

  void run() \{
    for (Boid b : boids) \{
      b.run(boids);  // Passing the entire list of boids to each boid individually
    \}
  \}

  void addBoid(Boid b) \{
    boids.add(b);
  \}

\}    

// The Boid class

class Boid \{

  PVector position;
  PVector velocity;
  PVector acceleration;
  double r;

    Boid(double x, double y) \{
    acceleration = new PVector(0, 0);

    // This is a new PVector method not yet implemented in JS
    // velocity = PVector.random2D();

    // Leaving the code temporarily this way so that this example runs in JS
    double angle = random(TWO_PI);
    velocity = new PVector(cos(angle), sin(angle));

    position = new PVector(x, y);
    r = 2.0;
  \}

  void run(ArrayList<Boid> boids) \{
    flock(boids);
    update();
    borders();
    render();
  \}

  void applyForce(PVector force) \{
    // We could add mass here if we want A = F / M
    acceleration.add(force);
  \}

  // We accumulate a new acceleration each time based on three rules
  void flock(ArrayList<Boid> boids) \{
    PVector sep = separate(boids);   // Separation
    PVector ali = align(boids);      // Alignment
    PVector coh = cohesion(boids);   // Cohesion
    // Arbitrarily weight these forces
    sep.mult(1.5);
    ali.mult(1.0);
    coh.mult(1.0);
    // Add the force vectors to acceleration
    applyForce(sep);
    applyForce(ali);
    applyForce(coh);
  \}

  // Method to update position
  void update() \{
    // Update velocity
    velocity.add(acceleration);
    // Limit speed
    velocity.limit(d(maxspeed));
    position.add(velocity);
    // Reset accelertion to 0 each cycle
    acceleration.mult(0);
  \}

  // A method that calculates and applies a steering force towards a target
  // STEER = DESIRED MINUS VELOCITY
  PVector seek(PVector target) \{
    PVector desired = PVector.sub(target, position);  // A vector pointing from the position to the target
    // Scale to maximum speed
    desired.normalize();
    desired.mult(d(maxspeed));

    // Above two lines of code below could be condensed with new PVector setMag() method
    // Not using this method until Processing.js catches up
    // desired.setMag(d(maxspeed));

    // Steering = Desired minus Velocity
    PVector steer = PVector.sub(desired, velocity);
    steer.limit(d(maxforce));  // Limit to maximum steering force
    return steer;
  \}

  void render() \{
    // Draw a triangle rotated in the direction of velocity
    double theta = velocity.heading() + radians(90);
    
    fill(200, 100);
    stroke(255);
    pushMatrix();
    translate(position.x, position.y);
    rotate(theta);
    point(0, 0);
    for(int i=0; i<5; ++i) \{
        stroke(255, random(0, 255));
        point(random(-i, i), i*3);    
    \}
//    ellipse(0, 0, 2, 8);
//    beginShape(TRIANGLES);
//    vertex(0, -r*2);
//    vertex(-r, r*2);
//    vertex(r, r*2);
//    endShape();
    popMatrix();
  \}

  // Wraparound
  void borders() \{
    if (position.x < -r) position.x = width+r;
    if (position.y < -r) position.y = height+r;
    if (position.x > width+r) position.x = -r;
    if (position.y > height+r) position.y = -r;
  \}

  // Separation
  // Method checks for nearby boids and steers away
  PVector separate (ArrayList<Boid> boids) \{
    PVector steer = new PVector(0, 0, 0);
    int count = 0;
    // For every boid in the system, check if it's too close
    for (Boid other : boids) \{
      double dist = PVector.dist(position, other.position);
      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
      if ((dist > 0) && (dist < d(desiredseparation))) \{
        // Calculate vector pointing away from neighbor
        PVector diff = PVector.sub(position, other.position);
        diff.normalize();
        diff.div(dist);        // Weight by distance
        steer.add(diff);
        count++;            // Keep track of how many
      \}
    \}
    // Average -- divide by how many
    if (count > 0) \{
      steer.div((double)count);
    \}

    // As long as the vector is greater than 0
    if (steer.mag() > 0) \{
      // First two lines of code below could be condensed with new PVector setMag() method
      // Not using this method until Processing.js catches up
      // steer.setMag(d(maxspeed));

      // Implement Reynolds: Steering = Desired - Velocity
      steer.normalize();
      steer.mult(d(maxspeed));
      steer.sub(velocity);
      steer.limit(d(maxforce));
    \}
    return steer;
  \}

  // Alignment
  // For every nearby boid in the system, calculate the average velocity
  PVector align (ArrayList<Boid> boids) \{
    double neighbordist = 50;
    PVector sum = new PVector(0, 0);
    int count = 0;
    for (Boid other : boids) \{
      double d = PVector.dist(position, other.position);
      if ((d > 0) && (d < neighbordist)) \{
        sum.add(other.velocity);
        count++;
      \}
    \}
    if (count > 0) \{
      sum.div((double)count);
      // First two lines of code below could be condensed with new PVector setMag() method
      // Not using this method until Processing.js catches up
      // sum.setMag(d(maxspeed));

      // Implement Reynolds: Steering = Desired - Velocity
      sum.normalize();
      sum.mult(d(maxspeed));
      PVector steer = PVector.sub(sum, velocity);
      steer.limit(d(maxforce));
      return steer;
    \} 
    else \{
      return new PVector(0, 0);
    \}
  \}

  // Cohesion
  // For the average position (i.e. center) of all nearby boids, calculate steering vector towards that position
  PVector cohesion (ArrayList<Boid> boids) \{
    double neighbordist = 50;
    PVector sum = new PVector(0, 0);   // Start with empty vector to accumulate all positions
    int count = 0;
    for (Boid other : boids) \{
      double d = PVector.dist(position, other.position);
      if ((d > 0) && (d < neighbordist)) \{
        sum.add(other.position); // Add position
        count++;
      \}
    \}
    if (count > 0) \{
      sum.div(count);
      return seek(sum);  // Steer towards the position
    \} 
    else \{
      return new PVector(0, 0);
    \}
  \}
\}

"
  }
  @ ./timer core:timing:timer {
    #%graph.x 96
    #%graph.y 200
  }
  ~ ./boids!out ./screen!in
  ~ ./timer!out ./boids!scare
}
