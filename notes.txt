# Receive from another box on port 9999 and show
gst-launch-1.0 udpsrc port=9999 ! application/x-rtp,encoding-name=JPEG,payload=26 ! rtpjpegdepay ! jpegdec ! autovideosink

# Weird issue with GStreamer failing to play to v4l2sink
https://github.com/umlaeute/v4l2loopback/issues/116

# Receive and redirect to virtual device
gst-launch-1.0 udpsrc port=9999 ! application/x-rtp,encoding-name=JPEG,payload=26 ! rtpjpegdepay ! jpegdec ! videoscale ! videoconvert ! tee ! v4l2sink device=/dev/video1

# Send stream from this device (only use lower screen - check starty=1200)
gst-launch-1.0 -v ximagesrc use-damage=false starty=1200 xname=/usr/lib/torcs/torcs-bin ! videoconvert ! videoscale ! video/x-raw,format=I420,width=1920,height=1080,framerate=25/1 ! jpegenc ! rtpjpegpay ! udpsink host=192.168.2.10 port=9999

# Debug option (for gst-launch-1.0)
--gst-debug-level=2

# Setting buffer size (for  udpsink and udpsrc)
buffer-size=$((512*1024))

# GStreamer
http://www.einarsundgren.se/gstreamer-basic-real-time-streaming-tutorial/




# Create virtual video device
sudo modprobe v4l2loopback devices=1
# or
sudo modprobe v4l2loopback video_nr=1
ls /dev/video*

# Clear devices
sudo modprobe -r v4l2loopback

# Virtual video device
https://github.com/umlaeute/v4l2loopback



# Forward OSC data from SuperCollider
// http://doc.sccode.org/Classes/OSCdef.html

// initialise forwarding function
var addr = NetAddr.new("IPADDRESS", 3333);
OSCdef(\tidalplay2, {
    arg msg;
    addr.sendMsg("/play2", *msg);
}, '/play2', n);

// clear forwarding function
OSCdef(\tidalplay2).clear;
// unregister OSCdef
OSCdef(\tidalplay2).free;

// list all OSCdefs
OSCdef.all.do(_.postln)

# Sending silence from tidal
p "100" $ fast 16 $ sound "u1"

# Test forwarding is working
sudo nc -ul 3333



# UFW open
sudo ufw allow proto udp to 0.0.0.0/0 port 9999
sudo ufw allow proto udp to 0.0.0.0/0 port 3333

# UFW close
sudo ufw delete allow proto udp to 0.0.0.0/0 port 9999
sudo ufw delete allow proto udp to 0.0.0.0/0 port 3333


